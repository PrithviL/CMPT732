{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf820
{\fonttbl\f0\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl280\partightenfactor0

\f0\fs24 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 import java.io.IOException;\
import java.util.Random;\
\
import org.apache.hadoop.conf.Configuration;\
import org.apache.hadoop.conf.Configured;\
import org.apache.hadoop.fs.Path;\
import org.apache.hadoop.io.LongWritable;\
import org.apache.hadoop.io.NullWritable;\
import org.apache.hadoop.io.Text;\
import org.apache.hadoop.mapreduce.Job;\
import org.apache.hadoop.mapreduce.Mapper;\
import org.apache.hadoop.mapreduce.lib.input.TextInputFormat;\
import org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;\
import org.apache.hadoop.util.Tool;\
import org.apache.hadoop.util.ToolRunner;\
import org.apache.hadoop.mapreduce.lib.input.FileSplit;\
\
public class EulerEstimator extends Configured implements Tool \{\
 \
    public static class EulerMapper\
    extends Mapper<LongWritable, Text, NullWritable,NullWritable>\{\
 \
        @Override\
        public void map(LongWritable key, Text value, Context context\
                ) throws IOException, InterruptedException\
        \{\
         FileSplit filesplit = ((FileSplit)context.getInputSplit());\
         long code = filesplit.getPath().getName().hashCode()+key.get();\
         \
         long iterations_counter=0;\
         long iter = Integer.parseInt(value.toString());\
         long count_counter = 0, counts=0;\
         double sum=0.0;\
         Random ran=new Random(code);\
         \
         for(long i=0;i<iter;i++)\
         \{\
        	 sum=0.0;\
        	 while(sum < 1.0)\
        	 \{\
        		sum+=ran.nextDouble();\
				counts++;\
        	 \}\
        \}\
    	 iterations_counter += iter;\
    	 count_counter += counts;\
        context.getCounter("Euler", "counts").increment(counts);\
        context.getCounter("Euler","iterations").increment(iterations_counter);\
        \}\
    \}\
 /*\
    public static class EulerEstimator\
    extends Reducer<Text, LongWritable, Text, LongWritable> \{\
        private LongWritable result = new LongWritable();\
 \
        @Override\
        public void reduce(Text key, Iterable<LongWritable> values,\
                Context context\
                ) throws IOException, InterruptedException \{\
            long max = 0;\
            for (LongWritable val : values) \{\
                if(max < val.get())\
                \{\
                    max=val.get();\
                \}\
         \
\
            \}\
           context.write(key, new LongWritable(max));\
        \}\
    \}\
 */\
    public static void main(String[] args) throws Exception \{\
        int res = ToolRunner.run(new Configuration(), new EulerEstimator(), args);\
        System.exit(res);\
    \}\
 \
    @Override\
    public int run(String[] args) throws Exception \{\
        Configuration conf = this.getConf();\
        Job job = Job.getInstance(conf, "EulerEstimator");\
        job.setJarByClass(EulerMapper.class);\
 \
        job.setInputFormatClass(TextInputFormat.class);\
 \
        job.setMapperClass(EulerMapper.class);\
        /*job.setCombinerClass(WikipediaReducer.class);\
        job.setReducerClass(WikipediaReducer.class);*/\
 \
        job.setMapOutputKeyClass(NullWritable.class);\
        job.setMapOutputValueClass(NullWritable.class);\
        job.setMapOutputValueClass(NullWritable.class);\
        TextInputFormat.addInputPath(job, new Path(args[0]));\
        TextOutputFormat.setOutputPath(job, new Path(args[1]));\
 \
        return job.waitForCompletion(true) ? 0 : 1;\
    \}\
\}\
}