{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf820
{\fonttbl\f0\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl280\partightenfactor0

\f0\fs24 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 import java.io.IOException;\
 \
import org.apache.hadoop.fs.Path;\
import org.apache.hadoop.io.LongWritable;\
import org.apache.hadoop.io.Text;\
import org.apache.hadoop.mapreduce.InputSplit;\
import org.apache.hadoop.mapreduce.JobContext;\
import org.apache.hadoop.mapreduce.RecordReader;\
import org.apache.hadoop.mapreduce.TaskAttemptContext;\
import org.apache.hadoop.mapreduce.lib.input.TextInputFormat;\
import org.apache.hadoop.mapreduce.lib.input.LineRecordReader;\
 \
import com.google.common.base.Charsets;\
 \
public class MultiLineJSONInputFormat extends TextInputFormat \{\
 \
    public class MultiLineRecordReader extends RecordReader<LongWritable, Text> \{\
        LineRecordReader linereader;\
        LongWritable current_key;\
        Text current_value;\
 \
        public MultiLineRecordReader(byte[] recordDelimiterBytes) \{\
            linereader = new LineRecordReader(recordDelimiterBytes);\
        \}\
 \
        @Override\
        public void initialize(InputSplit genericSplit,\
                TaskAttemptContext context) throws IOException \{\
            linereader.initialize(genericSplit, context);\
        \}\
 \
        @Override\
        public boolean nextKeyValue() throws IOException \{\
        	boolean res = linereader.nextKeyValue();\
        	current_key = linereader.getCurrentKey();\
        	String linevalue = "";\
        	while(res)\{\
        		linevalue = linevalue + linereader.getCurrentValue().toString();\
        		current_value=new Text(linevalue);\
        		if(!linereader.getCurrentValue().toString().endsWith("\}"))\
        		\{\
        			res=linereader.nextKeyValue();\
        		\}\
        		else\
        			break;\
        	\} \
        return res;\
        \}\
        \
        		\
        @Override\
        public float getProgress() throws IOException \{\
            return linereader.getProgress();\
        \}\
 \
        @Override\
        public LongWritable getCurrentKey() \{\
            return current_key;\
        \}\
 \
        @Override\
        public Text getCurrentValue() \{\
            return current_value;\
        \}\
 \
        @Override\
        public synchronized void close() throws IOException \{\
            linereader.close();\
        \}\
    \}\
 \
    // shouldn't have to change below here\
 \
    @Override\
    public RecordReader<LongWritable, Text> \
    createRecordReader(InputSplit split,\
            TaskAttemptContext context) \{\
        // same as TextInputFormat constructor, except return MultiLineRecordReader\
        String delimiter = context.getConfiguration().get(\
                "textinputformat.record.delimiter");\
        byte[] recordDelimiterBytes = null;\
        if (null != delimiter)\
            recordDelimiterBytes = delimiter.getBytes(Charsets.UTF_8);\
        return new MultiLineRecordReader(recordDelimiterBytes);\
    \}\
 \
    @Override\
    protected boolean isSplitable(JobContext context, Path file) \{\
        // let's not worry about where to split within a file\
        return false;\
    \}\
\}\
}